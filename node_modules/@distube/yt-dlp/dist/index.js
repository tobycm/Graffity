"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.YouTubeDLPlugin = exports.YtDlpPlugin = void 0;
const youtube_dl_1 = __importStar(require("@distube/youtube-dl"));
const distube_1 = require("distube");
class YtDlpPlugin extends distube_1.ExtractorPlugin {
    constructor() {
        super();
        (0, youtube_dl_1.download)().catch(() => undefined);
    }
    // eslint-disable-next-line @typescript-eslint/require-await
    async validate() {
        return true;
    }
    async resolve(url, { member, metadata }) {
        var _a;
        const info = await (0, youtube_dl_1.default)(url, {
            dumpSingleJson: true,
            noWarnings: true,
            noCallHome: true,
            preferFreeFormats: true,
        }).catch(e => {
            throw new distube_1.DisTubeError("YTDLP_ERROR", `${e.stderr || e}`);
        });
        if (Array.isArray(info.entries) && info.entries.length > 0) {
            info.source = info.extractor.match(/\w+/)[0];
            info.songs = info.entries.map((i) => new distube_1.Song(i, { member, source: i.extractor, metadata }));
            return new distube_1.Playlist(info, { member, metadata, properties: { source: (_a = info.songs[0]) === null || _a === void 0 ? void 0 : _a.source } });
        }
        return new distube_1.Song(info, { member, source: info.extractor, metadata });
    }
    async getStreamURL(url) {
        const info = await (0, youtube_dl_1.default)(url, {
            dumpSingleJson: true,
            noWarnings: true,
            noCallHome: true,
            preferFreeFormats: true,
        }).catch(e => {
            throw new distube_1.DisTubeError("YTDLP_ERROR", `${e.stderr || e}`);
        });
        return info.url;
    }
}
exports.YtDlpPlugin = YtDlpPlugin;
exports.YouTubeDLPlugin = YtDlpPlugin;
//# sourceMappingURL=index.js.map